<mah:MetroWindow
    x:Class="LcLauncher.Main.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:local="clr-namespace:LcLauncher.Main"
    xmlns:rack="clr-namespace:LcLauncher.Main.Rack"
    xmlns:edit="clr-namespace:LcLauncher.Main.Rack.Editors"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    TitleCharacterCasing="Normal"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance local:MainViewModel, IsDesignTimeCreatable=False}"
    Icon="/LcLauncher;component/lclaunch.ico"
    WindowStartupLocation="CenterScreen"
    ResizeMode="CanResizeWithGrip"
    Title="Luc's Application Launchpad"
    MinHeight="500" MinWidth="900"
    Height="850" Width="1285"
    Activated="WindowActivated"
    Deactivated="WindowDeactivated"
    Closing="WindowClosing">
    <mah:MetroWindow.RightWindowCommands>
        <mah:WindowCommands>
            <Menu
                Visibility="{Binding ShowDevMenu, Converter={StaticResource VisibleIf}}">
                <MenuItem
                    Foreground="{DynamicResource MahApps.Brushes.Gray6}"
                    Header="Dev">
                    <MenuItem Header="Reload apps"
                              Command="{Binding DevReloadAppsCommand}"/>
                    <MenuItem Header="Dump apps"
                              Command="{Binding DevDumpAppsCommand}"/>
                    <MenuItem Header="Toggle Dev Pane"
                              Command="{Binding DevTogglePaneCommand}"/>
                    <MenuItem Header="Process Next Icon Batch"
                              Command="{Binding ProcessNextIconJobCommand}"/>
                </MenuItem>
            </Menu>
            <ComboBox
                ItemsSource="{Binding RackList.RacksPlusManager}"
                DisplayMemberPath="Label"
                HorizontalContentAlignment="Left"
                HorizontalAlignment="Center"
                MinWidth="200"
                BorderThickness="0"
                Background="{DynamicResource MahApps.Brushes.Accent4}"
                Foreground="{DynamicResource MahApps.Brushes.Gray6}"
                SelectedItem="{Binding RackList.Selected, Mode=TwoWay}"
                DropDownOpened="RackList_DropDownOpened">
            </ComboBox>
        </mah:WindowCommands>
    </mah:MetroWindow.RightWindowCommands>
    <DockPanel>
        <Grid
            DockPanel.Dock="Top"
            Visibility="{Binding ShowDevPane, Converter={StaticResource VisibleIf}}">
            <TextBlock Text="DEV PANE"/>
            <!--<local:TestPane
                DataContext="{Binding TestPane}"/>-->
        </Grid>
        <Grid>
            <ScrollViewer
                Visibility="{Binding CurrentRack, Converter={StaticResource VisibleIfNotNull}}"
                VerticalScrollBarVisibility="Hidden"
                HorizontalScrollBarVisibility="Visible">
                <ScrollViewer.Resources>
                    <!-- https://stackoverflow.com/a/50260778/271323 -->
                    <!-- Plus checking the source for the right name. The default is 14. -->
                    <sys:Double x:Key="MahApps.Sizes.ScrollBar.Width">10</sys:Double>
                    <sys:Double x:Key="MahApps.Sizes.ScrollBar.Height">14</sys:Double>
                </ScrollViewer.Resources>
                <!--
                We are nesting scrollviewers here. This is the outer "horizontal"
                ScrollViewer; RackView contains the inner "vertical" ScrollViewer (one
                per column, in fact).
                WPF doesn't have "HorizontalScrollViewer" or "VerticalScrollViewer",
                only the combination. Without the "Height" trick below the outer
                ScrollViewer tries to take care of both scrolling axes. Binding the
                content's height to the scroll viewer's content presenter's actual
                height does the trick.
                Inspiration taken from https://stackoverflow.com/a/20889057/271323 ,
                with my own adaptations based on the live property inspector
                (especially figuring out that it is "ScrollContentPresenter" you want
                the source height from)
                -->
                <Grid Height="{Binding ActualHeight,
                    RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ScrollContentPresenter}}">
                    <rack:RackView DataContext="{Binding CurrentRack}"/>
                </Grid>
            </ScrollViewer>
            <Border
                Visibility="{Binding CurrentRack, Converter={StaticResource VisibleIfNull}}"
                BorderThickness="1"
                BorderBrush="{DynamicResource MahApps.Brushes.Accent4}">
                <rack:RackManagerView DataContext="{Binding RackManager}"/>
            </Border>
            <local:EditorBaseView
                Visibility="{Binding Converter={StaticResource VisibleIfNotNull}}"
                DataContext="{Binding CurrentEditor}"/>
        </Grid>
    </DockPanel>
</mah:MetroWindow>
