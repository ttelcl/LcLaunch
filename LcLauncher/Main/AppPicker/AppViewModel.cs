/*
 * (c) 2025  ttelcl / ttelcl
 */

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Media.Imaging;

using LcLauncher.ShellApps;
using LcLauncher.WpfUtilities;

using LcLauncher.DataModel.Utilities;
using LcLauncher.IconTools;

namespace LcLauncher.Main.AppPicker;

public class AppViewModel: ViewModelBase, IIconJobTarget
{
  public AppViewModel(
    AppSelectorViewModel owner,
    ShellAppDescriptor descriptor)
  {
    IconTargetId = Guid.NewGuid();
    Owner = owner;
    Descriptor = descriptor;
    Icon = descriptor.Icon;
  }

  public ShellAppDescriptor Descriptor { get; }

  public AppSelectorViewModel Owner { get; }

  public string Label => Descriptor.Label;

  public bool HasFile => Descriptor.HasFile;

  public string? FilePath  => Descriptor.HasFile ? Descriptor.FileSystemPath : null; 

  public bool HasFolder => Descriptor.HasFolder;

  public string? FolderPath => Descriptor.HasFolder ? Descriptor.FileSystemPath : null;

  public bool SupportsRawTile => Descriptor.IsExe;

  public bool SupportsDocTile => Descriptor.IsExe || Descriptor.IsDoc || Descriptor.IsFolder;

  public bool SupportsUriTile => Descriptor.IsUri;

  public bool SupportsAppTile => true; // for now: always true, but may be refined in future

  public bool SupportsTile(TileKind tk)
  {
    return tk switch {
      TileKind.ExecutableTile => SupportsRawTile,
      TileKind.DocumentTile => SupportsDocTile,
      TileKind.ModernAppTile => SupportsAppTile,
      TileKind.UriTile => SupportsUriTile,
      _ => false,
    };
  }

  public AppCategory Category =>
    Descriptor.Kind switch {
      ShellAppKind.PlainFileApp =>
        SupportsRawTile 
        ? AppCategory.ExecutableApp
        : SupportsDocTile 
          ? AppCategory.DocumentApp
          : AppCategory.OtherApp,
      ShellAppKind.FolderFileApp =>
        SupportsRawTile
        ? AppCategory.ExecutableApp
        : SupportsDocTile
          ? AppCategory.DocumentApp
          : AppCategory.OtherApp,
      ShellAppKind.PlainFolderApp =>
        HasFolder ? AppCategory.FolderApp : AppCategory.OtherApp,
      ShellAppKind.Autogenerated =>
        AppCategory.ShortcutApp,
      ShellAppKind.AppId =>
        AppCategory.ModernApp,
      ShellAppKind.UriKind =>
        AppCategory.ProtocolApp,
      ShellAppKind.DottedName =>
        AppCategory.ClassicApp,
      _ => AppCategory.OtherApp,
    };

  private void RequestIcon()
  {
    if(!_iconRequested)
    {
      _iconRequested = true;
      Trace.TraceInformation($"Requesting missing icon {Descriptor.ParsingName}");
      Owner.IconJobQueue.Enqueue(
        this,
        IconLoadLevel.System,
        false);
      Owner.Owner.ActivateRackIconQueue();
    }
  }

  private bool _iconRequested;
  
  public BitmapSource? Icon {
    get {
      if (_icon == null)
      {
        RequestIcon();
      }
      return _icon;
    }
    set {
      if(SetNullableInstanceProperty(ref _icon, value))
      {
        Descriptor.Icon = value;
      }
    }
  }
  private BitmapSource? _icon;

  /// <inheritdoc/>
  public Guid IconTargetId { get; }

  /// <inheritdoc/>
  public string IconSource => Descriptor.FullParsingName;

  /// <inheritdoc/>
  public IconSize IconSizes => IconSize.Large;

  /// <inheritdoc/>
  public IconIdSet IconIds { get; } = new IconIdSet();

  /// <inheritdoc/>
  public IconSet Icons { get; } = new IconSet();

  /// <inheritdoc/>
  public void UpdateIcons(IconIdSet iconIds, IconSet icons)
  {
    IconIds.Icon48 = iconIds.Icon48;
    Icons.IconLarge = icons.IconLarge;
    Icon = icons.IconLarge;
  }
}
